#' set size limit for input (9999mb)
options(
    shiny.maxRequestSize = 9999 * 1024 ^ 2, # size limit for input 9999mb
    scipen = 999 # disabling scientific notation
)

#' MAIN SERVER =================================================================
shinyServer(function(input, output, session) {
    # Automatically stop a Shiny app when closing the browser tab
    session$allowReconnect(TRUE)
    homePath = c(wd='~/') # for shinyFileChoose
    
    # input file ===============================================================
    getDomainFile <- reactive({
        shinyFileChoose(
            input, "domainFile", roots = homePath, session = session,
            filetypes = c('', 'domains')
        )
        fileSelected <- parseFilePaths(homePath, input$domainFile)
        return(replaceHomeCharacter(as.character(fileSelected$datapath)))
    })
    output$domainFile.ui <- renderUI({
        req(getDomainFile())
        if (length(getDomainFile()) > 0) {
            outString <- getDomainFile()
            if (nchar(outString) > 30)
                outString <- paste0(
                    substrLeft(outString, 15), "...", substrRight(outString, 15)
                )
            em(outString)
        }
    })
    
    # input folder =============================================================
    getDomainDir <- reactive({
        shinyDirChoose(
            input, "domainDir", roots = homePath, session = session
        )
        domainPath <- parseDirPath(homePath, input$domainDir)
        return(replaceHomeCharacter(as.character(domainPath)))
    })
    output$domainDir.ui <- renderUI({
        req(getDomainDir())
        if (length(getDomainDir()) > 0) {
            outString <- getDomainDir()
            if (nchar(outString) > 30)
                outString <- paste0(
                    substrLeft(outString, 15), "...", substrRight(outString, 15)
                )
            em(outString)
        }
    })
    
    # get protein Ids ==========================================================
    # getIds <- function (inputType, domainFile, domainDir) {
    #     if(input$inputType == "File") {
    #         req(getDomainFile())
    #         df <- read.csv(
    #             getDomainFile(), header = FALSE, sep = "\t", 
    #             stringsAsFactors = FALSE
    #         )
    #         df[c("groupID", "tmp")] <- str_split_fixed(df$V1, '#', 2)
    #         return(
    #             list(
    #                 levels(as.factor(df$groupID)), 
    #                 #levels(as.factor(df$V2[df$groupID == input$seed]))
    #                 levels(as.factor(df$groupID))
    #             )
    #         )
    #     } else if (input$inputType == "Folder") {
    #         req(getDomainDir())
    #         files <- list.files(getDomainDir(), pattern = ".domains")
    #         return(
    #             list(
    #                 str_replace(levels(as.factor(files)), ".domains", ""),
    #                 NULL
    #             )
    #         )
    #     }
    # }

    # getOrthoIDs <- reactive({
    #     req(getIds())
    #     if(input$inputType == "File") {
    #         return(getIds()[[2]])
    #     } else if (input$inputType == "Folder") {
    #         req(getDomainDir())
    #         files <- list.files(getDomainDir(), pattern = ".domains")
    #         return(str_replace(levels(as.factor(files)), ".domains", ""))
    #     }
    # })
    
    output$seedID.ui <- renderUI({
        selectInput(
            "seed",
            "Seed/Group ID",
            choices = c("none", getGroupIds("File", getDomainFile(), getDomainDir())[[1]])
            # ,
            # getIds()[[1]][1]
        )
    })
    
    # seq IDs ==================================================================
    output$seqID.ui <- renderUI({
        # req(input$nrSeq)
        # if (input$nrSeq == 1) {
            list(
                # selectInput(
                #     "seed",
                #     "Seed/Group ID",
                #     choices = c(1:10) #c("none", getGroupIds("File", getDomainFile(), getDomainDir())[[1]])
                #     # ,
                #     # getIds()[[1]][1]
                # ),
                selectInput(
                    "seq1",
                    "Protein ID 1",
                    getOrthoIDs(input$seed, getDomainFile()),
                    getOrthoIDs(input$seed, getDomainFile())[1]
                    # getIds()[[2]],
                    # getIds()[[2]][1]
                )
            )
        # } else if (input$nrSeq == 2) {
        #     list(
        #         selectInput(
        #             "seq1",
        #             "Protein ID 1",
        #             getIds()[[2]],
        #             getIds()[[2]][1]
        #         ),
        #         selectInput(
        #             "seq2",
        #             "Protein ID 2",
        #             getIds()[[2]],
        #             getIds()[[2]][2]
        #         )
        #     )
        # } else if (input$nrSeq == 3) {
        #     list(
        #         selectInput(
        #             "seq1",
        #             "Protein ID 1",
        #             getIds()[[2]],
        #             getIds()[[2]][1]
        #         ),
        #         selectInput(
        #             "seq2",
        #             "Protein ID 2",
        #             getIds()[[2]],
        #             getIds()[[2]][2]
        #         ),
        #         selectInput(
        #             "seq3",
        #             "Protein ID 3",
        #             getIds()[[2]],
        #             getIds()[[2]][3]
        #         )
        #     )
        # } else if (input$nrSeq == 4) {
        #     list(
        #         selectInput(
        #             "seq1",
        #             "Protein ID 1",
        #             getIds()[[2]],
        #             getIds()[[2]][1]
        #         ),
        #         selectInput(
        #             "seq2",
        #             "Protein ID 2",
        #             getIds()[[2]],
        #             getIds()[[2]][2]
        #         ),
        #         selectInput(
        #             "seq3",
        #             "Protein ID 3",
        #             getIds()[[2]],
        #             getIds()[[2]][3]
        #         ),
        #         selectInput(
        #             "seq4",
        #             "Protein ID 4",
        #             getIds()[[2]],
        #             getIds()[[2]][4]
        #         )
        #     )
        # } else if (input$nrSeq == 5) {
        #     list(
        #         selectInput(
        #             "seq1",
        #             "Protein ID 1",
        #             getIds()[[2]],
        #             getIds()[[2]][1]
        #         ),
        #         selectInput(
        #             "seq2",
        #             "Protein ID 2",
        #             getIds()[[2]],
        #             getIds()[[2]][2]
        #         ),
        #         selectInput(
        #             "seq3",
        #             "Protein ID 3",
        #             getIds()[[2]],
        #             getIds()[[2]][3]
        #         ),
        #         selectInput(
        #             "seq4",
        #             "Protein ID 4",
        #             getIds()[[2]],
        #             getIds()[[2]][4]
        #         ),
        #         selectInput(
        #             "seq5",
        #             "Protein ID 5",
        #             getIds()[[2]],
        #             getIds()[[2]][5]
        #         )
        #     )
        # }
    })
    
    # domain plot ==============================================================
    # * get domain info ========================================================
    getDomainInformation <- reactive({
        req(input$doPlot)
        withProgress(message = 'Reading domain input...', value = 0.5, {
            if (input$inputType == "File") {
                domainDf <- parseDomainInput(
                    input$seq1,
                    getDomainFile(),
                    "file"
                )
            } else if (input$inputType == "Folder") {
                domainDf <- parseDomainInput(
                    input$seq1,
                    getDomainDir(),
                    "folder"
                )
            }
            # print(input$seq1)
            # print(head(domainDf))
            return(domainDf)
        })
    })
    
    output$domainPlot <- renderPlot({
        req(getDomainInformation())
        if (input$doPlot > 0) {
            if (is.null(getDomainInformation())) {
                msgPlot()
            } else {
                g <- createArchiPlot2(
                    c(input$seq1, input$seq1), getDomainInformation(), 12, 12
                )
                if (any(g == "No domain info available!")) {
                    msgPlot()
                } else {
                    grid::grid.draw(g)
                }
            }
        }
    })
})